= registration and confirmation =

== process ==

 * user enters username, email, and preferred password on site

 * site stores details and creates a url based on a hash of:

    email? primary key in db?

    nonce

    date?

 * user receives confirmation email

 * user visits url

 * webapp receives url hash

   * determines user on that hash

   * activates account

   * deletes rego rows

   * optionally logs them in right away?

== database requirements ==

 * accounts table
  * username
  * email
  * password
  * activation flag

 * registrations table
  * registration timestamp (for expiry)?
  * foreign key on accounts table
  * url hash for easy retrieval (indexed lookup rather than sequential
scan)

== error cases ==

 * invalid hash received by webapp -> no activation

 * user doesn't visit url
  * no activation
  * do not expire proposals, or account data, but flag as inactive.
  * if user registers a second time with same email address, then
original account is re-confirmed with new password?

 * user registers, does not confirm, but tries to log in.
  * warn that this account has not yet been activated
  * resend confirmation email with new hash to email address

 * user registers twice, n times, before confirmation
  * email address is the same, already exists
  * do not update account data
  * warn that the account has not yet been activated
  * expire oldest hash?  does this gain us anything?
  * warn that latest url is the only valid one?  or allow any of the N
hashes available?  if any of N are allowed, do we delete all rego rows
when they confirm?


== implications ==

 * email address is *the* primary method of identifying an account
   the username/handle field is now *only* useful for giving a
human-readable URL for that person.

 * given that, allow logins on email address *and* handle?

 * need something to keep an eye on registrations table.  potential
space DoS.
